use text_size::{TextRange, TextSize};
use codespan_reporting::diagnostic::Diagnostic;

use crate::surface::{Const, Expr, Located, Pat, Token, TokenKind, FunParam, FunArg};
use crate::surface::LalrpopError;
use crate::plicity::Plicity;

grammar<'surface>(
    bump: &'surface bumpalo::Bump,
    errors: &mut Vec<LalrpopError>,
);

extern {
    type Location = TextSize;
    type Error = std::convert::Infallible;

    enum TokenKind {
        "false" => TokenKind::KwFalse,
        "forall" => TokenKind::KwForall,
        "fun" => TokenKind::KwFun,
        "let" => TokenKind::KwLet,
        "true" => TokenKind::KwTrue,

        "(" => TokenKind::LParen,
        ")" => TokenKind::RParen,
        "{" => TokenKind::LCurly,
        "}" => TokenKind::RCurly,

        "_" => TokenKind::Underscore,
        "," => TokenKind::Comma,
        ";" => TokenKind::Semicolon,
        ":" => TokenKind::Colon,
        "@" => TokenKind::At,
        "=" => TokenKind::Eq,
        "=>" => TokenKind::DoubleArrow,
        "->" => TokenKind::SingleArrow,

        "Ident" => TokenKind::Ident,
        "DecInt" => TokenKind::DecInt,
        "BinInt" => TokenKind::BinInt,
        "HexInt" => TokenKind::HexInt,
    }
}

pub Expr: Located<Expr<'surface>> = {
    LetExpr => <>,
}

LetExpr: Located<Expr<'surface>> = {
    <start: @L> "let" <pat: Pat> <r#type: (":" <Expr>)?> "=" <init: Expr> ";" <body: Expr> <end: @R> => {
        let range = TextRange::new(start, end);
        let r#type = r#type.map(|r#type| bump.alloc(r#type) as &_);
        let (pat, init, body) = bump.alloc((pat, init, body));
        Located::new(range, Expr::Let { pat, r#type, init, body })
    },
    <start: @L> <expr: AtomExpr> ":" <r#type: FunExpr> <end:@R> => {
        let range = TextRange::new(start, end);
        let (expr, r#type) = bump.alloc((expr, r#type));
        Located::new(range, Expr::Ann { expr, r#type })
    },
    FunExpr => <>,
}

FunExpr: Located<Expr<'surface>> = {
    <start: @L> "fun" <params: FunParam+> "=>" <body: Expr> <end: @R> => {
        let range = TextRange::new(start, end);
        let params = bump.alloc_slice_copy(&params);
        let body = bump.alloc(body);
        Located::new(range, Expr::FunLit { params, body })
    },
    <start: @L> "forall" <params: FunParam+> "->" <body: Expr> <end: @R> => {
        let range = TextRange::new(start, end);
        let params = bump.alloc_slice_copy(&params);
        let body = bump.alloc(body);
        Located::new(range, Expr::FunType { params, body })
    },
    <start: @L> <plicity: Plicity> <lhs: AppExpr> "->" <rhs: FunExpr> <end: @R> => {
        let range = TextRange::new(start, end);
        let (lhs, rhs) = bump.alloc((lhs, rhs));
        Located::new(range, Expr::FunArrow { plicity, lhs, rhs })
    },
    AppExpr => <>,
}

AppExpr: Located<Expr<'surface>> = {
    <start: @L> <fun: AppExpr> <arg: FunArg> <end: @R> => {
        let range = TextRange::new(start, end);
        let (fun, ) = bump.alloc((fun, ));
        Located::new(range, Expr::FunApp { fun, arg })
    },
    AtomExpr => <>,
}

FunParam: Located<FunParam<'surface>> = {
    <start: @L> "(" <plicity: Plicity> <pat: Pat> ":" <r#type: Expr> ")" <end: @R> => {
        let range = TextRange::new(start, end);
        Located::new(range, FunParam { plicity, pat, r#type: Some(r#type) })
    },
    <start: @L> <plicity: Plicity> <pat: Pat> <end: @R> => {
        let range = TextRange::new(start, end);
        Located::new(range, FunParam { plicity, pat, r#type: None })
    }
}

FunArg: Located<FunArg<'surface>> = {
    <start: @L> <plicity: Plicity> <expr: AtomExpr> <end: @R> => {
        let range = TextRange::new(start, end);
        let expr = bump.alloc(expr);
        Located::new(range, FunArg { plicity, expr })
    }
}

#[inline]
Plicity: Plicity = {
    "@" => Plicity::Implicit,
    ()  => Plicity::Explicit,
}

AtomExpr: Located<Expr<'surface>> = {
    <start: @L> <recovery: !> <end: @R> => {
        let range = TextRange::new(start, end);
        errors.push(recovery.error);
        Located::new(range, Expr::Error)
    },
    <start: @L> <r#const: Const> <end: @R> => Located::new(TextRange::new(start, end), Expr::Const(r#const)),
    <start: @L> "Ident" <end: @R> => Located::new(TextRange::new(start, end), Expr::LocalVar),
    <start: @L> "_" <end: @R> => Located::new(TextRange::new(start, end), Expr::Hole),
    <start: @L> "(" <expr: Expr> ")" <end: @R> => Located::new(TextRange::new(start, end), Expr::Paren { expr: bump.alloc(expr) }),
}

Pat: Located<Pat<'surface>> = {
    <start: @L> <recovery: !> <end: @R> => {
        let range = TextRange::new(start, end);
        errors.push(recovery.error);
        Located::new(range, Pat::Error)
    },
    <start: @L> "_" <end: @R> => Located::new(TextRange::new(start, end), Pat::Underscore),
    <start: @L> "Ident" <end: @R> => Located::new(TextRange::new(start, end), Pat::Ident),
    <start: @L> "(" <pat: Pat> ")" <end: @R> => {
        let range = TextRange::new(start, end);
        let pat = bump.alloc(pat);
        Located::new(range, Pat::Paren { pat })
    }
}

Const: Const = {
    "true" => Const::Bool(true),
    "false" => Const::Bool(false),
    "DecInt" => Const::DecInt,
    "BinInt" => Const::BinInt,
    "HexInt" => Const::HexInt,
}

Sep0<Elem, Sep>: &'surface [Elem] = {
    <mut elems: (<Elem> Sep)*> <last: Elem?> => {
        elems.extend(last);
        bump.alloc_slice_copy(&elems)
    }
};

Sep1<Elem, Sep>: &'surface [Elem] = {
    <mut elems: (<Elem> Sep)*> <last: Elem> Sep? => {
        elems.push(last);
        bump.alloc_slice_copy(&elems)
    }
};
